import React, { useEffect, useState } from 'react'
import { Connection, Keypair, PublicKey, LAMPORTS_PER_SOL, clusterApiUrl } from '@solana/web3.js'
import { createMint, getOrCreateAssociatedTokenAccount, mintTo } from '@solana/spl-token'

type PhantomProvider = {
  isPhantom?: boolean
  connect: () => Promise<{ publicKey: { toString(): string } }>
  publicKey?: { toString(): string }
  request: (args: any) => Promise<any>
}

const DEVNET = clusterApiUrl('devnet')
const connection = new Connection(DEVNET, 'confirmed')

function isRunningInTelegram(): boolean {
  try {
    const hasObj = Boolean((window as any)?.Telegram?.WebApp)
    const qs = new URLSearchParams(window.location.search)
    const hasTgParams = qs.has('tgWebAppPlatform') || qs.has('tgWebAppStartParam')
    return hasObj || hasTgParams
  } catch {
    return false
  }
}

export default function App() {
  const [wallet, setWallet] = useState<PhantomProvider | null>(null)
  const [pubkey, setPubkey] = useState<string>('')
  const [status, setStatus] = useState<string>('')

  useEffect(() => {
    const provider = (window as any)?.solana as PhantomProvider | undefined
    if (provider?.isPhantom) setWallet(provider)
  }, [])

  async function connectPhantom() {
    try {
      if (!wallet) {
        setStatus('Phantom –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–∫—Ä–æ–π –≤–æ –≤–Ω–µ—à–Ω–µ–º –±—Ä–∞—É–∑–µ—Ä–µ, –≥–¥–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Phantom.')
        return
      }
      const res = await wallet.connect()
      setPubkey(res.publicKey.toString())
      setStatus('–ö–æ—à–µ–ª—ë–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω ‚úÖ')
    } catch (e: any) {
      setStatus('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' + (e?.message || e))
    }
  }

  async function airdropDevnet() {
    try {
      if (!pubkey) return setStatus('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏ Phantom')
      setStatus('–ó–∞–ø—Ä–∞—à–∏–≤–∞—é airdrop 1 SOL‚Ä¶')
      const sig = await connection.requestAirdrop(new PublicKey(pubkey), 1 * LAMPORTS_PER_SOL)
      await connection.confirmTransaction(sig, 'confirmed')
      setStatus('Airdrop –∑–∞—á–∏—Å–ª–µ–Ω ‚úÖ (1 SOL Devnet)')
    } catch (e: any) {
      setStatus('Airdrop –æ—à–∏–±–∫–∞: ' + (e?.message || e))
    }
  }

  async function createTestMint() {
    try {
      if (!pubkey) return setStatus('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏ Phantom')

      setStatus('–°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π mint‚Ä¶')
      const mintAuthority = Keypair.generate()

      const mint = await createMint(
        connection,
        mintAuthority,
        mintAuthority.publicKey,
        null,
        6
      )

      const ata = await getOrCreateAssociatedTokenAccount(
        connection,
        mintAuthority,
        mint,
        new PublicKey(pubkey)
      )

      await mintTo(
        connection,
        mintAuthority,
        mint,
        ata.address,
        mintAuthority.publicKey,
        1_000_000
      )

      setStatus(`Mint —Å–æ–∑–¥–∞–Ω ‚úÖ: ${mint.toBase58()}\n–ù–∞ ATA –∑–∞—á–∏—Å–ª–µ–Ω–æ 1 —Ç–æ–∫–µ–Ω`)
    } catch (e: any) {
      setStatus('Mint –æ—à–∏–±–∫–∞: ' + (e?.message || e))
    }
  }

  async function buyMock() {
    if (!pubkey) return setStatus('–ü–æ–¥–∫–ª—é—á–∏ Phantom')
    setStatus('Buy (mock): –ø–æ–¥–∫–ª—é—á–∏–º –ø–æ—Å–ª–µ –ø—É–ª–∞/–º–∞—Ä–∫–µ—Ç–∞.')
  }
  async function sellMock() {
    if (!pubkey) return setStatus('–ü–æ–¥–∫–ª—é—á–∏ Phantom')
    setStatus('Sell (mock): –ø–æ–¥–∫–ª—é—á–∏–º –ø–æ—Å–ª–µ –ø—É–ª–∞/–º–∞—Ä–∫–µ—Ç–∞.')
  }

  const insideTG = isRunningInTelegram()

  return (
    <div className="app" style={{ paddingTop: insideTG ? 24 : 60 }}>
      <img src="/logo.png" alt="PULMP.FUN" className="logo" />
      <h1>PULMP.FUN</h1>

      <p style={{ marginTop: 8 }}>
        {insideTG ? 'Telegram Mini App –∑–∞–ø—É—â–µ–Ω ‚úÖ' : 'Welcome to the Mini App üöÄ'}
      </p>

      {!insideTG && (
        <a className="btn" href="https://t.me/pulmpfunbot?startapp=launch">
          –û—Ç–∫—Ä—ã—Ç—å –≤ Telegram
        </a>
      )}

      <div className="card" style={{ maxWidth: 520, marginTop: 24 }}>
        <h2>Devnet –±–∏–ª–¥</h2>
        <p>–ü–æ–¥–∫–ª—é—á–∏ –∫–æ—à–µ–ª—ë–∫ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –±–∞–∑–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.</p>

        <div style={{ display: 'flex', gap: 12, flexWrap: 'wrap' }}>
          <button className="btn" onClick={connectPhantom}>Connect Phantom</button>
          <button className="btn" onClick={airdropDevnet}>Airdrop 1 SOL</button>
          <button className="btn" onClick={createTestMint}>Create Test Token</button>
          <button onClick={buyMock}>Buy (mock)</button>
          <button onClick={sellMock}>Sell (mock)</button>
        </div>

        <div style={{ marginTop: 12, fontSize: 14, whiteSpace: 'pre-line' }}>
          {pubkey && <>Wallet: <b>{pubkey}</b><br/></>}
          {status && <span>{status}</span>}
        </div>
      </div>

      {!wallet && (
        <p style={{ marginTop: 12, fontSize: 13, opacity: 0.8 }}>
          –ï—Å–ª–∏ Phantom –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤–Ω—É—Ç—Ä–∏ Telegram ‚Äî –Ω–∞–∂–º–∏ ¬´‚ãØ¬ª ‚Üí ¬´–û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ¬ª
          –∏ –ø–æ–¥–∫–ª—é—á–∏ –∫–æ—à–µ–ª—ë–∫ —Ç–∞–º.
        </p>
      )}
    </div>
  )
}
